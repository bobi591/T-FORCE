@using T_FORCE.Repositories;

@{ ViewData["Title"] = "Create new Kanban board"; }


<div id="container" style="padding: 2%">
    <h1 class="h3 mb-3 text-gray-800">Create custom Kanban board</h1>
    <p class="mb-1">Create new Custom Kanban board by setting it's attributes.</p>
    <p class="mb-4">Switching task columns in custom boards will not reflect the actual task status.</p>


    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">New Custom Kanban board attributes</h6>
        </div>
        <div class="card-body" name="card-body" id="card-body">
            <form method="post" action="@Url.Action("CreateCustomBoard","Kanban")">
                <div id="options" name="options">
                    <label for="bname"><b>Board name</b></label>
                    <input id="name" type="text" class="form-control" placeholder="Enter board name" name="name" required>

                    <label for="projectSelector"><b>Project</b></label>
                    <select id="projectName" name="projectName" class="form-control" required>
                        @{
                            ProjectRepository projectRepository = new ProjectRepository();
                            foreach (Project project in projectRepository.GetAllProjects())
                            {
                                <option value="@project.Name">@project.Name</option>
                            }
                        }
                    </select>
                    <label id="bColumnNamesLabel" for="bColumnNamesLabel"></label>
                    <ul class="list-group" id="columnsNames" name="columnsNames">
                    </ul>
                    <label for="bColumnName"><b>Column name</b></label>
                    <input type="text" class="form-control" placeholder="Enter column name" name="columnName" id="columnName">
                </div>
                <div class="my-3">
                    <input class="btn btn-primary" onclick="GenerateColumnNameInput()" type="button" value="Add column" />
                    <input id="btn-createBoard" class="btn btn-success" type="submit" value="Create" disabled/>
                    <input class="btn btn-danger" onclick="window.location.href='/'" type="button" value="Cancel" />
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Dynamic options menu for column names based on the number of columns -->
<script type="text/javascript">
    function GenerateColumnNameInput() {

        var columnInput = document.getElementById("columnName");

        var newColumnLabel = document.getElementById("bColumnNamesLabel");

        if (columnInput.value != '') {

            if (newColumnLabel.innerHTML == "") {
                newColumnLabel.innerHTML = "<b>Columns</b>";
            }

            var columnsNewElement = document.createElement("input");
            columnsNewElement.setAttribute('name', 'columnNamesElements');
            columnsNewElement.setAttribute('class', 'list-group-item list-group-item-action');
            columnsNewElement.setAttribute('onchange', 'ColumnNamesLiOnChange(this)');
            columnsNewElement.value = columnInput.value;

            document.getElementById("columnsNames").appendChild(columnsNewElement);

            columnInput.value = '';

            document.getElementById("btn-createBoard").disabled = false;
        }
    }
    //If the Column Names li user imput gets empty, remove the element!
    function ColumnNamesLiOnChange(obj) {

        var newColumnLabel = document.getElementById("bColumnNamesLabel");
        var columnsList = document.getElementById("columnsNames");

        if (obj.value === '' && columnsList.childElementCount==1) {
            newColumnLabel.innerHTML = "";
            document.getElementById("btn-createBoard").disabled = true;
        }

        if (obj.value === '') {
            obj.remove();
        }
    }
</script>